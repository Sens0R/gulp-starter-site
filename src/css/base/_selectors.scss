/* ====================   MAPS   ==================== */

.color {
  @include modifiers($map: $colors, $attribute: 'color');
}

.color-bg {
  @include modifiers($map: $colors, $attribute: 'background-color');
}

.fw {
  @include modifiers($map: $font-weights, $attribute: 'font-weight');
}

// Creating gap, padding and margin classes from spacer variables inside map
@each $spacer-key, $spacer-value in $spacers {
  // gutters (flex-gap)
  .g {
    &#{$spacer-key} {
      display: flex;
      gap: $spacer-value;
      flex-wrap: wrap;
    }

    &x#{$spacer-key} {
      display: flex;
      column-gap: $spacer-value;
    }

    &y#{$spacer-key} {
      display: flex;
      row-gap: $spacer-value;
    }
  }

  // spacers - padding
  .p {
    &#{$spacer-key} {
      padding: $spacer-value;
    }

    &x#{$spacer-key} {
      padding-left: $spacer-value;
      padding-right: $spacer-value;
    }

    &y#{$spacer-key} {
      padding-top: $spacer-value;
      padding-bottom: $spacer-value;
    }

    &s#{$spacer-key} {
      padding-left: $spacer-value;
    }

    &e#{$spacer-key} {
      padding-right: $spacer-value;
    }

    &t#{$spacer-key} {
      padding-top: $spacer-value;
    }

    &b#{$spacer-key} {
      padding-bottom: $spacer-value;
    }
  }

  // spacers - margins
  .m {
    &-auto {
      margin: auto;
    }
    &#{$spacer-key} {
      margin: $spacer-value;
    }

    &x {
      &-auto {
        margin-left: auto;
        margin-right: auto;
      }
      &#{$spacer-key} {
        margin-left: $spacer-value;
        margin-right: $spacer-value;
      }
    }

    &y {
      &-auto {
        margin-top: auto;
        margin-bottom: auto;
      }
      &#{$spacer-key} {
        margin-top: $spacer-value;
        margin-bottom: $spacer-value;
      }
    }

    &s {
      &-auto {
        margin-left: auto;
      }
      &#{$spacer-key} {
        margin-left: $spacer-value;
      }
    }

    &e {
      &-auto {
        margin-right: auto;
      }
      &#{$spacer-key} {
        margin-right: $spacer-value;
      }
    }

    &t {
      &-auto {
        margin-top: auto;
      }
      &#{$spacer-key} {
        margin-top: $spacer-value;
      }
    }

    &b {
      &-auto {
        margin-bottom: auto;
      }
      &#{$spacer-key} {
        margin-bottom: $spacer-value;
      }
    }
  }
}

/* ====================   NORMAL   ==================== */

.active-page {
  color: var(--color-active-page);
}

.section {
  display: flex;
  flex-direction: column;
  gap: var(--spacer-lg);
  padding-top: var(--spacer-xl);
  padding-bottom: var(--spacer-xl);
}

.lh {
  line-height: var(--lh);

  &-1 {
    line-height: 1;
  }

  &-sm {
    line-height: var(--lh-sm);
  }

  &-lg {
    line-height: var(--lh-lg);
  }
}

.text-center {
  text-align: center !important;
}

.uppercase {
  text-transform: uppercase !important;
}

.lowercase {
  text-transform: lowercase !important;
}

.capitalize {
  text-transform: capitalize !important;
}

.italic {
  font-style: italic !important;
}

.disable-select {
  user-select: none !important;
}

.nowrap {
  white-space: nowrap !important;
}

.visually-hidden {
  @include visually-hidden();
}

.link-space {
  @include link-space();
}

.transition {
  transition: var(--transition) !important;

  &-stop {
    transition: none !important;
  }
}

.overflow {
  &-hidden {
    overflow: hidden !important;
  }

  &-visible {
    overflow: visible !important;
  }
}

.flex-center {
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
}

.rotate {
  &-right {
    rotate: -90deg;
  }

  &-left {
    rotate: 90deg;
  }

  &-top {
    rotate: -180deg;
  }
}

.position {
  &-static {
    position: static !important;
  }

  &-relative {
    position: relative !important;
  }

  &-absolute {
    position: absolute !important;
  }

  &-fixed {
    position: fixed !important;
  }

  &-sticky {
    position: sticky !important;
  }
}

.bg-image {
  @include stretch-section();
  z-index: -1;
}
