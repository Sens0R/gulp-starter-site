// Flexbox one line 
@mixin flex(
  $display: flex,
  $justify-content: null,
  $align-items: null,
  $flex-direction: null,
  $flex-wrap: null,
  $gap: null,
  $row-gap: null,
  $column-gap: null
) {
  display: $display;
  justify-content: $justify-content;
  align-items: $align-items;
  flex-direction: $flex-direction;
  flex-wrap: $flex-wrap;
  gap: $gap;
  row-gap: $row-gap;
  column-gap: $column-gap;
}

// Hover only for mouse users 
@mixin hover {
  @media (hover: hover) and (pointer: fine) {
    &:hover {
      @content;
    }
  }
}

// Invisible space for better link and button selecting 
@mixin link-space($width: 100%, $height: 100%, $size: 48px) {
  position: relative;

  &::after {
    content: '';
    display: block;
    width: $width;
    height: $height;
    min-width: $size;
    min-height: $size;
    position: absolute;
    top: 50%;
    left: 50%;
    translate: -50% -50%;
  }
}

// Positioning
@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);
    @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
      #{$o}: nth($args, $i + 1);
    }
  }
  position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
  @include position(absolute, $args);
}

@mixin fixed($args: '') {
  @include position(fixed, $args);
}

@mixin sticky($args: '') {
  @include position(sticky, $args);
}

@mixin relative($args: '') {
  @include position(relative, $args);
}

// Height and width one line
@mixin box($width, $height, $type: fixed) {
  @if $type == 'min' {
    min-width: $width;
    max-height: $height;
  } @else if $type == 'max' {
    max-width: $width;
    max-height: $height;
  } @else if $type == 'fixed' {
    width: $width;
    height: $height;
  }
}

// Old phones media breakpoint
@mixin media-xs {
  @media (max-width: 359.98px) {
    @content;
  }
}

// Keep for screen readers, hide for others 
@mixin visually-hidden() {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

// Creating classes from maps
@mixin modifiers($map, $attribute, $prefix: '-', $separator: '-', $base: 'base') {
  @each $key, $value in $map {
    &#{if($key != $base, #{$prefix}#{$key}, '')} {
      @if type-of($value) == 'map' {
        @include modifiers($value, $attribute, $separator);
      } @else {
        #{$attribute}: $value;
      }
    }
  }
}

