// text presets from _text-presets.scss
@mixin text-preset($value) {
	@extend %text-preset-#{$value} !optional;
}

// check for device input type
@mixin device-input($type) {
	@if $type == touch {
		@media (hover: none) and (pointer: coarse) {
			@content;
		}
	} @else if $type == mouse {
		@media (hover: hover) and (pointer: fine) {
			@content;
		}
	} @else if $type {
		@error "Device input type is INVALID. Device input types: touch, mouse";
	}
}

@mixin chevron($size: 0.5em, $margin-left: 0.3em) {
	&:after {
		--chevron-line: 2px solid currentColor;

		content: '';
		margin-left: $margin-left;
		rotate: 135deg;
		width: $size;
		height: $size;
		border-top: var(--chevron-line);
		border-left: var(--chevron-line);
		display: flex;
		align-self: center;
		justify-content: center;
		transition: translate var(--transition-md), scale var(--transition-md);
	}

	@include hover(focus) {
		&:after {
			translate: 2px;
			scale: 1.15;
		}
	}
}

// Hover only for mouse users, focus only for keyboard
@mixin hover($focus: null) {
	@media (hover: hover) and (pointer: fine) {
		&:hover {
			@content;
		}
	}

	@if $focus == focus {
		&:focus-visible {
			@content;
		}
	}
}

// Invisible space for better link and button selecting
@mixin target-space($size: 44px, $width: 100%, $height: 100%) {
	position: relative;

	&::before {
		content: '';
		position: absolute;
		display: block;
		width: $width;
		height: $height;
		min-width: $size;
		min-height: $size;
		top: 50%;
		left: 50%;
		translate: -50% -50%;
	}
}

@mixin stretch() {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

@mixin bp($breakpoint: md, $minmax: min) {
	$breakpoint-value: map-get($grid-breakpoints, $breakpoint);
	@if ($minmax == max) {
		$breakpoint-value: #{map-get($grid-breakpoints, $breakpoint) - 1};
	}
	@media (#{$minmax}-width: $breakpoint-value) {
		@content;
	}
}

// Creating classes from maps
// $base value is ignored during classes creation
@mixin modifiers($map, $attribute, $prefix: '-', $separator: '-', $base: null) {
	@each $key, $value in $map {
		&#{if($key != $base, #{$prefix}#{$key}, '')} {
			@if type-of($value) == 'map' {
				@include modifiers($value, $attribute, $separator);
			} @else {
				#{$attribute}: $value;
			}
		}
	}
}

// Creating css custom properties from sass variable maps
// for extra prefix use '--prefixname'
@mixin map-scss-vars-into-css-vars($map, $prefix: '-', $key: null) {
	@each $name, $value in $map {
		// copy the map key
		$key-copy: $key;
		// create name for CSS custom property that contains:
		// current key + child key from nested map
		@if $name != null {
			$key: #{$key}-#{$name};
		}

		@if type-of($value) == 'map' {
			// if value is a map, invoke it once more
			@include map-scss-vars-into-css-vars($value, $prefix, $key);
		} @else {
			#{$prefix}#{$key}: #{$value};
		}
		// next iteration of loop should go with unchanged key
		$key: $key-copy;
	}
}

@mixin visually-hidden() {
	position: absolute !important;
	width: 1px !important;
	height: 1px !important;
	padding: 0 !important;
	margin: -1px !important;
	overflow: hidden !important;
	clip: rect(0, 0, 0, 0) !important;
	white-space: nowrap !important;
	border: 0 !important;
}

